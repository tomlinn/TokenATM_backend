package com.capstone.tokenatm.controller;

import com.capstone.tokenatm.entity.RequestEntity;
import com.capstone.tokenatm.entity.SpendLogEntity;
import com.capstone.tokenatm.exceptions.BadRequestException;
import com.capstone.tokenatm.service.EarnService;
import com.capstone.tokenatm.service.LogRepository;
import com.capstone.tokenatm.service.Request.RequestLogBody;
import com.capstone.tokenatm.service.Request.UseTokenBody;
import com.capstone.tokenatm.service.RequestRepository;
import com.capstone.tokenatm.service.Response.RejectTokenResponse;
import com.capstone.tokenatm.service.Response.UseTokenResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
// This means that this class is a Controller
public class RequestController {
    @Autowired // This means to get the bean called LogRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RequestRepository requestRepository;

    @Autowired
    private LogRepository LogRepository;

    @Autowired
    EarnService earnService;

    @GetMapping("/requests/pending")
    public List<RequestEntity> getPendingRequests() {
        List<RequestEntity> requests = requestRepository.findAllByOrderByIdDescStatusAsc();
        return requests;
    }

    @PostMapping("/requests/approve/{id}")
    public ResponseEntity<?> approveRequest(@PathVariable Integer id) throws JSONException, IOException, BadRequestException {
        Optional<RequestEntity> optional = requestRepository.findById(id);
        if (!optional.isPresent()) {
            throw new BadRequestException("Request with ID " + id + " not found");
        }
        RequestEntity request = optional.get();
        UseTokenResponse tokenResponse = earnService.approve_token_use(request);
        if (tokenResponse.getAssignment_id().equals("success")) {
            request.setStatus("Approved");
            request.setApproved(Boolean.TRUE);
            requestRepository.save(request);
        } else {
            LogRepository.save(createLog("", "", "system", 0, "Failed to approve request - "+request.getStudentName()+"(" + request.getStudentId()+")",""));
            throw new BadRequestException(tokenResponse.getMessage());
        }
        LogRepository.save(createLog("", "", "system", 0, "Approved request - "+request.getStudentName()+"(" + request.getStudentId()+") - " + request.getAssignmentId(),""));
        return ResponseEntity.ok(request);
    }

    @PostMapping("/requests/approveall")
    public ResponseEntity<?> approveAllRequest() throws JSONException, IOException, BadRequestException {
        List<RequestEntity> request = requestRepository.findAllByStatusOrderByIdDesc("Pending");
        if (request.size() == 0) {
            throw new BadRequestException("No request is pending for review");
        }

        UseTokenResponse tokenResponse = earnService.approve_all_token_use(request);
        return ResponseEntity.ok(request);
    }

    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<?> handleBadRequestException(BadRequestException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
    }

    @PostMapping("/requests/reject/{id}")
    public RequestEntity rejectRequest(@PathVariable Integer id) throws JSONException, IOException, BadRequestException {
        Optional<RequestEntity> optional = requestRepository.findById(id);
        if (!optional.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Request with ID " + id + " not found");
        }
        RequestEntity request = optional.get();
        RejectTokenResponse tokenResponse = earnService.reject_token_use(request);
        if (tokenResponse.getAssignment_id().equals("success")) {
            request.setStatus("Rejected");
            requestRepository.save(request);
        } else {
            LogRepository.save(createLog("", "", "system", 0, "Failed to reject request - "+request.getStudentName()+"(" + request.getStudentId()+")",""));
            throw new BadRequestException(tokenResponse.getMessage());
        }
        LogRepository.save(createLog("", "", "system", 0, "Rejected request - "+request.getStudentName()+"(" + request.getStudentId()+")",""));
        return request;
    }

    private SpendLogEntity createLog(String user_id, String user_name, String type, Integer token_count, String source, String note) {
        SpendLogEntity n = new SpendLogEntity();
        n.setUser_id(user_id);
        n.setUser_name(user_name);
        n.setType(type);
        n.setTokenCount(token_count);
        n.setSourcee(source);
        n.setTimestamp(new Date());
        n.setNote(note);
        return n;
    }
}
